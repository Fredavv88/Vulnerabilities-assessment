

Penetration testing and monitoring report



19.12.2020


 








 

Table of Contents
1	Revision History	2
2	Background/Scope	3
3	Findings	3
3.1	Vulnerabilities / Exploits / proof of concept	3
    3.2    Monitoring / Network topology  ……………….…………………………………………………………………………………………………………
4	Recommendations / hardening suggestions	3
 
1	Revision History
Author	Version	Date	Description
Freda Vuong	1.0		Version 1 2020 Annual Initial Document

 
2	Background / Scope 
 The scope of this engagement is target 1, two separate IP addresses with one thing in common, the same website in common, ‘Raven Security’. The target is to expose the vulnerabilities of the machines and report to the client. 
A full analysis was done to evaluate the security of the target and monitoring using Kibana for any occurrences that may have lead us to believe that an attack was occurring.  



3	  Findings
Machine IPs:
Target 1: 192.168.1.110
Target 2: 192.168.1.115
Kali machine: 192.168.1.90
 












3.1	Vulnerability / exploits 
Firstly, the Nmap scan was performed to allow us to navigate the IP addresses we needed to target, a scan was done on the subnet /24 and revealed all open ports on the target machines:
 

WP Scan for wordpress (Vulnerabilities for WordPress) command: wpscan  --url http://192.168.1.110/wordpress/ --enumerate u
 
This scan allowed us to enumerate the wordpress site, and in addition, the users were identified (steven and michael): 
 
Obtaining the users is vital in our operation as this allows us to proceed further to SSH and gain a shell into the users account to navigate further. 
The open port 80 (HTTP) allowed for navigation to the website domain of “Raven Security”, which further reveals more vulnerabilities such as directory listing and wordpress site. 
 

 
Directory listing is a vulnerability because it allows people to access information and folders on the website which should be hidden. If there was a hidden or secret folder, it could have been discovered by altering the URL at the end e.g. /secretfolder. 
SSH into users account
I tried to SSH into Michaels account by guessing; some attempts included common passwords such as password, password123 and the users name, Michael. The latter option worked so I was able to SSH into Michaels user account. 
 

Having had achieved access to Michaels’ shell via SSH, I navigated around to see what interesting files could contain passwords to achieve root access. Having knowledge that the wordpress folder was installed, I navigated there and found the config file that contained the mysql username and password for ‘root’ which allowed me to run the mysql command via root. 


3.3 
 

After running the command “mysql  -u root -p”, I am prompted for the password which I entered ‘R@v3nSecurity’, and was able to navigate the databases and subsequent tables running as root user account. 
 

 
as we are mainly interested in the passwords, I went to the wp_users table in wordpress and discovered the hashes for Steven and Michael (both users):
 
For cracking the password of Steven, I used the tool ‘John the Ripper’ in Kali Linux which revealed Steven’s password to be ‘pink84’:
 
The command used was john wp_hashes.txt. 
Now with Steven’s password, I was able to SSH into the account of Steven;
 
As per above, Steven’s account had access to python with sudo, so I then ran the command ‘sudo python  -c ‘import pty;pty.spawn(“/bin/bash”);’  to achieve root access:
 


Nikto Vulnerability scan (command used nikto –host http://192.168.1.110
After running the nikto vulnerability scanner command, it was found that the X-Content-Type-Options header was not set, which could allow the user agent to render the content of the site in a different fashion to the Mime type. Also the apache service appears to be outdated (2.4.10) which is a clear vulnerability.
 


 
3.2	Monitoring / Network Topology 
 

Target 1 (IP 192.168.1.110) 		Target 2 (IP: 192.168.1.115)
Operating system: Linux 		OS: Linux 
Purpose: target machine		Target machine (not applied) 
Kali machine (IP: 192.168.1.90)	Capstone (IP: 192.168.1.105)
Operating system: Linux 		OS: Linux 
Purpose: attacking machine 		Purpose:  none 
Elk machine (IP: 192.168.1.100)
Operating system: Linux
Purpose: monitoring (Kibana dashboards)





Description of the Targets:
•	Two VMs on the network were vulnerable to attack: Target 1 (192.168.1.110) and Target 2 (192.168.1.115). 
•	Each VM functions as an Apache web server and has SSH enabled, so ports 80 and 22 are possible ports of entry for attackers. 
Monitoring the targets 
The below alerts were created to monitor for activity:

HTTP Request Size Monitor
Above alert is implemented as follows:

●	Metric: count over top 5 ‘http.response.status_code’ for the last 5 mins
●	Threshold: above 400
●	Vulnerability Mitigated: directory listing, injection attacks
●	Reliability: high reliability 

 


Excessive HTTP errors

Above alert is implemented as follows:

●	Metric: when sum of http.request.bytes for the last 1 minute
●	Threshold: over 3500
●	Vulnerability Mitigated: directory listing, injection attacks
Reliability: high reliability 
 

CPU Usage monitor
is implemented as follows:

●	Metric: when max # of system.process.cpu.total.pct for the last 5 mins 
●	Threshold: over 0.5
●	Vulnerability Mitigated: 
●	Reliability: medium
 














3.3	Risk Level Definitions
High-Risk – The issue has a direct impact on the web application that directly leads to compromise.
Medium-Risk – The issue has a direct impact on the web application that does not directly lead to compromise but could be leveraged as part of the process without great difficulty.
Low-Risk – The issue has a direct impact on the web application, which could be used in the event of a compromise as an accessory to the attack, or could be used as part of the process to compromise a site, but present a greater level of difficulty to leverage than a medium-risk finding.
Informational – The issue has either:
•	A minimal negative impact on the web application, but as part of best security practices should be implemented to achieve compliance with such standards;
•	or should be implemented to assist in achieving security-in-depth across the web application.

The risk level of the pen-test done was considered ‘High-Risk’ due to the fact that the system was easily compromised to get root access. This means that attackers can use social engineering attacks such as whaling to compromise the system and steal private sensitive information. 

























4	Recommendations
The first recommendation would be to upgrade the version of Apache to the latest version (2.4.46) and disable WordPress (if possible). Reason being is that the Wordpress site is extremely vulnerable, as it contains plugins and themes which hackers can use to exploit and hack into. Once they have access to your website, they can run all types of malicious tasks such as stealing sensitive information, defrauding customers and displaying illegal content. If WordPress can be updated to the latest version, this could resolve some of the vulnerabilities associated with it and make the website secure. Also, SQL injection attacks and Cross-site Scripting attacks are the most common injection attacks on WordPress site, in this way hackers are able to run malicious scripts on your site which they can use to gain full control of your site. 
A recommendation would be to control field entries and data submissions and to use a WordPress firewall. 
•	To protect your site from phishing and data theft: Use an SSL certificate; this will encrypt the data that’s being transferred from and to your site. Even if a hacker intercepts it, they cannot use it as they won’t be able to decipher it. 
•	Disable directory listing by creating index.php or index.html
•	Upgrading to a more secure server streaming software.
•	Checking user input sanitisation and buffer overflow (buffer checks)
•	Ensuring firewalls are set up in place and restricting access to port 80.
•	Using password hashes and creating strong passwords, providing training on security awareness. The fact that the password for Michael was able to be guessed meant that firstly it is a very weak password, and secondly it does not contain any special characters or symbols which enables brute forcing easily. 

Open SSH Hardening 
•	https://www.cvedetails.com/vulnerability-list/vendor_id-97/product_id-585/version_id-188833/Openbsd-Openssh-6.7.html
•	This version of open SSH installed in the Target 1 is vulnerable to remote attackers exposing users and allows denial of service attacks. 
•	One of the recommendations is to set a custom SSH port, because by default, SSH comes listening on port 22, which is widely known among attackers and security tools/port scanners that launch brute force attacks on it. 
•	Filter the SSH port on your firewall 
•	Disable root login 
•	Install fail2ban, which scans log files and bans Ips that show the malicious signs i.e. too many password failures, seeking for exploits etc. Fail2ban is able to reduce the rate of incorrect authentications attempts however it cannot eliminate the risk that weak authentication presents. Passwords need to be stronger in order to prevent brute force attempts.

MYSQL Hardening
•	Some recommendations would be to drop the test database, remove all anonymous accounts, change default port mappings, alter which hosts have acess to MYSQL, do not run MySQL with root level privileges, limit or disable show databases, obfuscate the root account and set the proper file permissions. 

WordPress Hardening
•	The version of WordPress installed on target 1 is 3.7.8, which is extremely outdated, the current version is 5.4. This version of WordPress (3.X) has the most vulnerabilities of all versions, which is why it is highly suggested to upgrade to the latest version. 
•	Update plugins or themes to the latest version to protect potential hacking via this method.
•	Ensuring that the password for the login to WordPress is strong, as malicious actors can get their hands on login credentials and access the server that way. Use strong passwords for all WordPress accounts and limit login attempts to prevent brute force attacks.
•	Restrict access to the php file in the wordpress directory. Upgrade to the latest PHP version (8.9.9). 







 

